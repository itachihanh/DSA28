#include<bits/stdc++.h>
using namespace std;

struct node{
    int val;
    node *left, *right;
    node(int x) {
        val = x;
        left = right = NULL;
    }
};

node *insert(node *root, int key) {
    if(root == NULL) {
        return new node(key);
    }
    if(root->val < key) {
        root->right = insert(root->right, key);
    }
    else if(root->val > key) {
        root->left = insert(root->left, key);
    }
    return root;
}

node *findmin(node *root) {
    node *tmp = root;
    while(tmp->left != NULL) tmp = tmp->left;
    return tmp;
}

node *deleteNode(node *root, int key) {
    if(root == NULL) return root;
    if(key > root->val) root->right = deleteNode(root->right, key);
    else if(key < root->val) root->left = deleteNode(root->left, key);
    else {
        if(root->left == NULL && root->right == NULL) return NULL;
        else if(root->left == NULL) {
            node *tmp = root->right;
            delete root;
            return tmp;
        }
        else if(root->right == NULL) {
            node *tmp = root->left;
            delete root;
            return tmp;
        }
        else {
            node *tmp = findmin(root->right);
            root->val = tmp->val;
            root->right = deleteNode(root->right, tmp->val);
        }
    }
    return root;
}

void inorder(node *root) {
    if(root == NULL) return;
    inorder(root->left);
    cout << root->val << " ";
    inorder(root->right);
}

int main() {
    int n; cin >> n;
    node *root = NULL;
    for(int i = 0; i < n; i++) {
        int x; cin >> x;
        root = insert(root, x);
    }
    int key; cin >> key;
    root = deleteNode(root, key);
    inorder(root);
}
