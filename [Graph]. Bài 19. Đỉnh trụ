#include<bits/stdc++.h>
using namespace std;

int n, m, timer = 0, scc = 0;
vector<int> adj[1005];
int disc[1005], low[1005];
bool visited[1005], in_stack[1005], AP[1005];
stack<int> st;
#define ii pair<int, int>
vector<ii> bridge;

void nhap() {
    cin >> n >> m;
    for(int i = 1; i <= m; i++) {
        int x, y;
        cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    memset(visited, false, sizeof(visited));
    memset(AP, false, sizeof(AP));
    memset(in_stack, false, sizeof(in_stack));
}

void DFS_DinhTru(int u, int par) {
    visited[u] = true;
    disc[u] = low[u] = ++timer;
    int child = 0;
    for(int i : adj[u]) {
        if(i == par) continue;
        if(!visited[i]) {
            DFS_DinhTru(i, u);
            ++child;
            low[u] = min(low[u], low[i]);
            if(par != -1 && disc[u] <= low[i]) {
                AP[u] = true;
            }
        }
        else {
            low[u] = min(low[u], disc[i]);
        }
    }
    if(par == -1 && child > 1) AP[u] = true;
}

int main() {
    nhap();
   for(int i = 1; i <= n; i++) {
       if(!visited[i]) {
           DFS_DinhTru(i, -1);
       }
   }
    int cnt = 0;
   for(int i = 1; i <= n; i++) {
       if(AP[i]) ++cnt;
   }
    cout << cnt;
}
