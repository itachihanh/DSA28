#include<bits/stdc++.h>
using namespace std;

int dx[8] = {-2, -2, -1, -1, +1, +1, +2, +2};
int dy[8] = {+1, -1, +2, -2, +2, -2, +1, -1};
bool visited[9][9];
int d[9][9], s, t, u, v;

void ktao() {
    string a, b; cin >> a >> b;
    s = a[0] - 'a' + 1;
    t = a[1] - '0';
    u = b[0] - 'a' + 1;
    v = b[1] - '0';
    memset(visited, false, sizeof(visited));
    memset(d, 0, sizeof(d));
}

void BFS(int s, int t) {
    queue<pair<int, int>> q;
    q.push({s, t});
    visited[s][t] = true;
    while(!q.empty()) {
        auto top = q.front(); q.pop();
        if(top.first == u && top.second == v) {
            cout << d[u][v] << endl;
            break;
        }
        int i = top.first, j = top.second;
        for(int k = 0; k < 8; k++) {
            int i1 = i + dx[k], j1 = j + dy[k];
            if(i1 >= 1 && i1 <= 8 && j1 >= 1 && j1 <= 8 && !visited[i1][j1]) {
                q.push({i1, j1});
                d[i1][j1] = d[i][j] + 1;
                visited[i1][j1] = true;
            }
        }
    }
}

int main() {
    int test; cin >> test;
    while(test--) {
        ktao();
        BFS(s, t);
    }
}
