Segment tree

#include<bits/stdc++.h>
using namespace std;
#define ll long long

const int maxn = 1000005;
ll a[maxn], t[4 * maxn];

void build(int v, int l, int r) {
    if(l == r) {
        t[v] = a[l];
    }
    else {
        int m = (l + r) / 2;
        build(2 * v, l, m);
        build(2 * v + 1, m + 1, r);
        t[v] = t[2 * v] + t[2 * v + 1];
    }
}

void update(int v, int l, int r, int pos, int val) {
    if(l == r) {
        t[v] = val;
    }
    else {
        int m = (l + r) / 2;
        if(pos <= m) {
            update(2 * v, l, m, pos, val);
        }
        else {
            update(2 * v + 1, m + 1, r, pos, val);
        }
        t[v] = t[2 * v] + t[2 * v + 1];
    }
}

ll sum(int v, int tl, int tr, int l, int r) {
    if(l > r) return 0;
    if(l == tl && r == tr) return t[v];
    else {
        int tm = (tl + tr) / 2;
        return sum(2 * v, tl, tm, l, min(r, tm)) + sum(2 * v + 1, tm + 1, tr, max(tm + 1, l), r);
    }
}

int main() {
    int n, q; cin >> n >> q;
    for(int i = 1; i <= n; i++) cin >> a[i];
    build(1, 1, n);
    while(q--) {
        int tv, x, y; cin >> tv >> x >> y;
        if(tv == 1) update(1, 1, n, x, y);
        else cout << sum(1, 1, n, x, y) << endl;
    }
}

Fenwich tree

#include<bits/stdc++.h>
using namespace std;
#define ll long long

const int maxn = 1000005;
ll a[maxn], BIT[maxn], n;

void update(int pos, ll val) {
    for(; pos <= n; pos += pos & (-pos)) {
        BIT[pos] += val;
    }
}

ll query(int pos) {
    ll sum = 0;
    for(; pos > 0; pos -= pos & (-pos)) {
        sum += BIT[pos];
    }
    return sum;
}

int main() {
    cin >> n;
    int q; cin >> q;
    for(int i = 1; i <= n; i++) {
        cin >> a[i];
        update(i, a[i]);
    }
    while(q--) {
        int tv,x, y; cin >> tv >> x >> y;
        if(tv == 1) {
            update(x, y - a[x]); a[x] = y;
        }
        else cout << query(y) - query(x - 1) << endl;
    }
}
