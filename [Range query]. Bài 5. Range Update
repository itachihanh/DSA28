#include <bits/stdc++.h>
using namespace std;

const int N = 2e5+5;
long long n, q;
long long a[N];
long long tree[N*4], lazy[N*4];

void build(int node, int l, int r) {
    if (l == r) {
        tree[node] = a[l];
        return;
    }
    int mid = (l + r) / 2;
    build(node*2, l, mid);
    build(node*2+1, mid+1, r);
    tree[node] = tree[node*2] + tree[node*2+1];
}

void update(int node, int l, int r, int u, int v, long long val) {
    if (lazy[node] != 0) {
        tree[node] += lazy[node] * (r - l + 1);
        if (l != r) {
            lazy[node*2] += lazy[node];
            lazy[node*2+1] += lazy[node];
        }
        lazy[node] = 0;
    }
    if (l > v || r < u) {
        return;
    }
    if (l >= u && r <= v) {
        tree[node] += val * (r - l + 1);
        if (l != r) {
            lazy[node*2] += val;
            lazy[node*2+1] += val;
        }
        return;
    }
    int mid = (l + r) / 2;
    update(node*2, l, mid, u, v, val);
    update(node*2+1, mid+1, r, u, v, val);
    tree[node] = tree[node*2] + tree[node*2+1];
}

long long query(int node, int l, int r, int u) {
    if (lazy[node] != 0) {
        tree[node] += lazy[node] * (r - l + 1);
        if (l != r) {
            lazy[node*2] += lazy[node];
            lazy[node*2+1] += lazy[node];
        }
        lazy[node] = 0;
    }
    if (l > u || r < u) {
        return 0;
    }
    if (l == r) {
        return tree[node];
    }
    int mid = (l + r) / 2;
    long long res1 = query(node*2, l, mid, u);
    long long res2 = query(node*2+1, mid+1, r, u);
    return res1 + res2;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    cin >> n >> q;
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }

    build(1, 1, n);

    while (q--) {
        int type;
        cin >> type;
        if (type == 1) {
            int l, r;
            long long v;
            cin >> l >> r >> v;
            update(1, 1, n, l, r, v);
        } else {
            int u;
            cin >> u;
            cout << query(1, 1, n, u) << '\n';
        }
    }
    return 0;
}
